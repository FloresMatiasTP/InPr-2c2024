

////EJERCICIO 1


procedure ComerTodosLosCocosDelNivel (){
    /*
        Observacion: Es un recorrido de procesamiento sobre las celdas celdas del tablero en direccion hacia el Norte 
                   y este en donde se van a comer  los cocos de cada celda 
     */
    LlevarGobsManAlBorde_(Oeste)
    LlevarGobsManAlBorde_(Sur)
    while( haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte) ) {
        ComerCoco()
        MoverAGobsmanASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
        
    }
      
        ComerCoco()
}


procedure MoverAGobsmanASiguienteCeldaEnUnRecorridoAl_Y_(dirPrincipal, dirSecundaria){
     /*
    Proposito: Ubicar el cabezal en la siguiente celda en un recorrido en las direcciones **dirPrincipal** y **dirSecundaria**. 
               El cabezal queda en la siguiente celda del recorrido desde la celda actual.
    Precondiciones: 
        * dirPrincipal y dirSecundaria no deben ser iguales ni opuestas.
        * Debe existir una siguiente celda en el recorrido.
    Parametros:
        * dirPrincipal: Direcci贸n - La direcci贸n principal del recorrido.
        * dirSecundaria: Direcci贸n - La direcci贸n secundaria del recorrido.
    */
    if (puedeMover(dirPrincipal)  ) {
         MoverGobsManAl_(dirPrincipal)
    } else {
        MoverGobsManAl_(dirSecundaria)
         LlevarGobsManAlBorde_(opuesto(dirPrincipal))
    }
}
////EJERCICIO 2
procedure ComerCerezaSiHay() {
    
    if(hayCereza()){
        ComerCereza()
    }
}

procedure  ComerTodasLasCerezasDelNivel(){
    /*
        Observacion: Es un recorrido de procesamiento sobra las celdas del tablero que como todas las cerezas que se encuentre en el nivel
    */
     LlevarGobsManAlBorde_(Oeste)
    LlevarGobsManAlBorde_(Sur)
    while( haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)  ) {
        ComerCerezaSiHay()
        MoverAGobsmanASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
    }
        ComerCerezaSiHay()
}




////EJERCICIO 3

procedure ComerTodoLoQueSeEncuentreEnElNivel(){
    /*
        Observacion:
    */
    ComerTodosLosCocosDelNivel()
    ComerTodasLasCerezasDelNivel()
}

////EJERCICIO 4
procedure ComerCerezaOCocosSiHayEnLaCeldaActual() {
    
    if(hayCereza()){
        ComerCereza()
    }else{
        ComerCoco()
    }
}
procedure ComerTodoLoQueSeEncuentreEnElNivel(){
    /*
        Observacion:Es un recorrido de procesamiento sobre las celdas del tablero en direccion al NorEste en donde Gobsman come todas 
                    las cerezas y cocos que se encuentre en el nivel
    */
    UbicarAGobsmanEnLaPrimerCeldaEnUnRecorridoAl_Y_(Este,Norte)
    while( haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte) ) {
         ComerCerezaOCocosSiHayEnLaCeldaActual()
          MoverAGobsmanASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
    }
     ComerCerezaOCocosSiHay()
}

////EJERCICIO 5

procedure RecorrerNivelMuriendoEnElFantasma(){
    /*
        Observacion: Es un recorrido de busqueda
        sobre las celdas del tablero en direccion al NorEste 
        en donde recorre el tablero hasta encontrase con una celda que contiene a un fastasma y muriendo a Gobsman cuando se lo encuentre
    */
    UbicarAGobsmanEnLaPrimerCeldaEnUnRecorridoAl_Y_(Este,Norte)
    while ( not hayFantasma() ) {
        MoverAGobsmanASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
    }
    MorirGobsMan()
}


////EJERCICIO 6

procedure RecorrerNivelMuriendoSiHayFantasma(){
    /*
        Observacion: Es un recorrido de busqueda
        sobre las celdas del tablero en direccion al NorEste 
        buscando la celda que contiene a un fanstasma y muriendo a gobsmnan si encontre al fastasma
    */
    UbicarAGobsmanEnLaPrimerCeldaEnUnRecorridoAl_Y_(Este,Norte)
    while(   haySiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte) && not hayFantasma() )  {
        MorirGobsManSiHayFastasma()
        MoverAGobsmanASiguienteCeldaEnUnRecorridoAl_Y_(Este,Norte)
    }
    MorirGobsManSiHayFastasma()
}

procedure MorirGobsManSiHayFastasma(){
    
    if(hayFantasma()){
        MorirGobsMan()
    }
}

procedure JugarNivel(){
    /*
        Observacion : Es un recorrido de busqueda 
         sobre las celdas del nivel , Moviendo a Gobsman
         buscando
    */
        UbicarAGobsmanEnLaPrimerCeldaEnUnRecorridoAl_Y_(Oeste, Norte)     
        while(   haySiguienteCeldaEnUnRecorridoAl_Y_(Oeste, Norte) &&  not hayFantasma() ){
            ComerCerezaOCocosSiHayEnLaCeldaActual()
             MoverAGobsmanASiguienteCeldaEnUnRecorridoAl_Y_(Oeste, Norte)
        }
        ComerCerezaOCocosSiHayEnLaCeldaActual()
    
    
}


--------------------------  MS GOBSMAN-------------------------------
////EJERCICIO 10
function puntajeAObtenerEnCeldaActual(){
    /*
        Proposito: Describe la cantida de puntos que obtendra Ms Gobsman despues de comerse todo lo que hay en la celda actual
        Precondicion: Debe estar sobre l
    */
    
    return( choose 
                  2100 when(hayCereza() &&  hayCoco() )      
                  2000 when( hayCereza()  )
                  100 when( hayCoco()  )
                    0  otherwise)
           )  
}

////EJERCICIO 11

function puntajeAObtenerEnCeldaActual{
    
    return ( puntajeAObtenerEnCeldaActualPorCocos() + puntajeAObtenerEnCeldaActualPorCerezas() + puntajeAObtenerEnCeldaActualPorFrutillas() )    
}    

function puntajeAObtenerEnCeldaActualPorCocos(){
    
    return( choose 100 when( hayCoco )
                    0  otherwise)
           )  
}

function puntajeAObtenerEnCeldaActualPorCerezas(){
    
    return( choose 2000 when( hayCerezas() )
                    0  otherwise)
           )  
}
function puntajeAObtenerEnCeldaActualPorFrutillas(){
    
    return( choose 500 when( hayFrutillas() )
                    0  otherwise)
           )  
}


////EJERCICIO 13

procedure cantidadDePuntosEnElNivel() {
    // caso de borde en el return
    /*
        Observacion: Es un recorrido de acumulacion
                     sobre las eldas del nivel , moviendo a Ms-Gobs-Man
                     en donde acumulara los puntos obtenidos en cada celda del nivel
    */
     UbicarAGobsmanEnLaPrimerCeldaEnUnRecorridoAl_Y_(Este, Norte)   
     puntajeTotalAlMomento := 0
    while(   haySiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)  ){
        puntajeTotalAlMomento := puntajeTotalAlMomento + puntajeAObtenerEnCeldaActual()
         MoverAGobsmanASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
    }
    return(puntajeAObtenerEnCeldaActual +  puntajeAObtenerEnCeldaActual() )
    
}    

//  caso de borde en la primer celda
procedure cantidadDePuntosEnElNivel() {
    /*
        Observacion: Es un recorrido de acumulacion
                     sobre las eldas del nivel , moviendo a Ms-Gobs-Man
                     en donde acumulara los puntos obtenidos en cada celda del nivel
    */
    
    UbicarAGobsmanEnLaPrimerCeldaEnUnRecorridoAl_Y_(Este, Norte)   
    puntajeTotalAlMomento := puntajeAObtenerEnCeldaActual()
    while(   haySiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)  ){
         MoverAGobsmanASiguienteCeldaEnUnRecorridoAl_Y_(Este, Norte)
         puntajeTotalAlMomento := puntajeTotalAlMomento + puntajeAObtenerEnCeldaActual()
    }
    return(puntajeAObtenerEnCeldaActual  )
    
}    


